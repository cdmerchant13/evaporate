{
  "version": 3,
  "sources": ["../bundle-jjkwZj/checked-fetch.js", "../bundle-jjkwZj/strip-cf-connecting-ip-header.js", "../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-jjkwZj/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-jjkwZj/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/cmerchant/Projects/evaporate/worker/.wrangler/tmp/dev-RmW8YP",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "/**\n * Welcome to Cloudflare Workers! This is your first worker.\n *\n * - Run `npm run dev` in your terminal to start a development server\n * - Open a browser tab at http://localhost:8787/ to see your worker in action\n * - Run `npm run deploy` to publish your worker\n *\n * Learn more at https://developers.cloudflare.com/workers/\n */\n\nexport interface Env {\n\tR2_BUCKET: R2Bucket;\n\tD1_DB: D1Database;\n}\n\nconst CORS_HEADERS = {\n\t'Access-Control-Allow-Origin': '*',\n\t'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n\t'Access-Control-Allow-Headers': 'Content-Type',\n};\n\nfunction jsonResponse(data: any, status = 200) {\n\treturn new Response(JSON.stringify(data), {\n\t\tstatus,\n\t\theaders: { ...CORS_HEADERS, 'Content-Type': 'application/json' },\n\t});\n}\n\nexport default {\n\tasync fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n\t\tif (request.method === 'OPTIONS') {\n\t\t\treturn new Response(null, { headers: CORS_HEADERS });\n\t\t}\n\n\t\tconst url = new URL(request.url);\n\n\t\tif (url.pathname === '/upload' && request.method === 'POST') {\n\t\t\treturn handleUpload(request, env);\n\t\t}\n\n\t\tif (url.pathname.startsWith('/file/')) {\n\t\t\treturn handleFile(request, env);\n\t\t}\n\n\t\treturn jsonResponse({ error: 'Not Found' }, 404);\n\t},\n};\n\nasync function handleUpload(request: Request, env: Env): Promise<Response> {\n\tconst formData = await request.formData();\n\tconst file = formData.get('file') as unknown as File;\n\tconst passphrase = formData.get('passphrase') as string | null;\n\tconst expiry = formData.get('expiry') as string | null;\n\tconst oneTimeView = formData.get('oneTimeView') === 'true';\n\n\tif (!file || file.size === 0) {\n\t\treturn jsonResponse({ error: 'File not found or empty' }, 400);\n\t}\n\n\t// Max file size: 100MB\n\tif (file.size > 100 * 1024 * 1024) {\n\t\treturn jsonResponse({ error: 'File size exceeds 100MB limit' }, 400);\n\t}\n\n\tconst id = crypto.randomUUID();\n\tconst fileData = await file.arrayBuffer();\n\n\tawait env.R2_BUCKET.put(id, fileData, {\n\t\thttpMetadata: {\n\t\t\tcontentType: file.type,\n\t\t},\n\t});\n\n\tlet expires_at: number | null = null;\n\tif (expiry && expiry !== 'one-time') {\n\t\tconst now = new Date();\n\t\tswitch (expiry) {\n\t\t\tcase '1h':\n\t\t\t\tnow.setHours(now.getHours() + 1);\n\t\t\t\tbreak;\n\t\t\tcase '1d':\n\t\t\t\tnow.setDate(now.getDate() + 1);\n\t\t\t\tbreak;\n\t\t\tcase '7d':\n\t\t\t\tnow.setDate(now.getDate() + 7);\n\t\t\t\tbreak;\n\t\t}\n\t\texpires_at = Math.floor(now.getTime() / 1000);\n\t}\n\n\tlet passphrase_hash: string | null = null;\n\tif (passphrase) {\n\t\tconst encoder = new TextEncoder();\n\t\tconst data = encoder.encode(passphrase);\n\t\tconst hash = await crypto.subtle.digest('SHA-256', data);\n\t\tpassphrase_hash = Array.from(new Uint8Array(hash))\n\t\t\t.map((b) => b.toString(16).padStart(2, '0'))\n\t\t\t.join('');\n\t}\n\n\tawait env.D1_DB\n\t\t.prepare(\n\t\t\t'INSERT INTO files (id, name, type, size, expires_at, one_time_view, passphrase_hash, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?)'\n\t\t)\n\t\t.bind(\n\t\t\tid,\n\t\t\tfile.name,\n\t\t\tfile.type,\n\t\t\tfile.size,\n\t\t\texpires_at,\n\t\t\toneTimeView ? 1 : 0,\n\t\t\tpassphrase_hash,\n\t\t\tMath.floor(Date.now() / 1000)\n\t\t)\n\t\t.run();\n\n\tconst fileUrl = `${new URL(request.url).origin}/file/${id}`;\n\n\treturn jsonResponse({ url: fileUrl });\n}\n\nasync function handleFile(request: Request, env: Env): Promise<Response> {\n\tconst url = new URL(request.url);\n\tconst id = url.pathname.split('/')[2];\n\n\tif (!id) {\n\t\treturn jsonResponse({ error: 'Invalid file ID' }, 400);\n\t}\n\n\t// This is a metadata request\n\tif (request.method === 'GET' && request.headers.get('Accept') === 'application/json') {\n\t\tconst fileInfo = await env.D1_DB.prepare('SELECT name, size, passphrase_hash FROM files WHERE id = ?')\n\t\t\t.bind(id)\n\t\t\t.first();\n\n\t\tif (!fileInfo) {\n\t\t\treturn jsonResponse({ error: 'File not found' }, 404);\n\t\t}\n\t\treturn jsonResponse({\n\t\t\tname: fileInfo.name,\n\t\t\tsize: fileInfo.size,\n\t\t\trequiresPassphrase: !!fileInfo.passphrase_hash,\n\t\t});\n\t}\n\n\tconst fileInfo = await env.D1_DB.prepare('SELECT * FROM files WHERE id = ?').bind(id).first();\n\n\tif (!fileInfo) {\n\t\treturn jsonResponse({ error: 'File not found' }, 404);\n\t}\n\n\tif (fileInfo.expires_at && new Date(fileInfo.expires_at * 1000) < new Date()) {\n\t\tawait env.R2_BUCKET.delete(id);\n\t\tawait env.D1_DB.prepare('DELETE FROM files WHERE id = ?').bind(id).run();\n\t\treturn jsonResponse({ error: 'File expired' }, 410);\n\t}\n\n\tif (fileInfo.passphrase_hash) {\n\t\tif (request.method !== 'POST') {\n\t\t\treturn jsonResponse({ error: 'Passphrase required' }, 401);\n\t\t}\n\n\t\tconst body: { passphrase?: string } = await request.json();\n\t\tconst passphrase = body.passphrase;\n\n\t\tif (!passphrase) {\n\t\t\treturn jsonResponse({ error: 'Passphrase not provided' }, 401);\n\t\t}\n\n\t\tconst encoder = new TextEncoder();\n\t\tconst data = encoder.encode(passphrase);\n\t\tconst hash = await crypto.subtle.digest('SHA-256', data);\n\t\tconst provided_hash = Array.from(new Uint8Array(hash))\n\t\t\t.map((b) => b.toString(16).padStart(2, '0'))\n\t\t\t.join('');\n\n\t\tif (provided_hash !== fileInfo.passphrase_hash) {\n\t\t\treturn jsonResponse({ error: 'Invalid passphrase' }, 403);\n\t\t}\n\t}\n\n\tconst object = await env.R2_BUCKET.get(id);\n\n\tif (object === null) {\n\t\treturn jsonResponse({ error: 'File not found in storage' }, 404);\n\t}\n\n\tif (fileInfo.one_time_view) {\n\t\t// Use waitUntil to avoid blocking the response\n\t\tctx.waitUntil(env.R2_BUCKET.delete(id));\n\t\tctx.waitUntil(env.D1_DB.prepare('DELETE FROM files WHERE id = ?').bind(id).run());\n\t}\n\n\tconst headers = new Headers(CORS_HEADERS);\n\tobject.writeHttpMetadata(headers);\n\theaders.set('etag', object.httpEtag);\n\theaders.set('Content-Disposition', `attachment; filename=\"${fileInfo.name}\"`);\n\n\treturn new Response(object.body, {\n\t\theaders,\n\t});\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/cmerchant/Projects/evaporate/worker/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/cmerchant/Projects/evaporate/worker/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/cmerchant/Projects/evaporate/worker/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/cmerchant/Projects/evaporate/worker/src/index.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/cmerchant/Projects/evaporate/worker/.wrangler/tmp/bundle-jjkwZj/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/cmerchant/Projects/evaporate/worker/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/cmerchant/Projects/evaporate/worker/.wrangler/tmp/bundle-jjkwZj/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/cmerchant/Projects/evaporate/worker/.wrangler/tmp/bundle-jjkwZj/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["ctx", "fileInfo", "ctx", "ctx"]
}
